{"name": "test_writeemployee[getData0-getsearchData0]", "status": "broken", "statusDetails": {"message": "openpyxl.utils.exceptions.InvalidFileException: openpyxl does not support the old .xls file format, please use xlrd to read this file, or convert it to the more recent .xlsx file format.", "trace": "self = <tests.test_search_write_employee.TestHRMSwriteemployee object at 0x000002067FA116D0>\nsetupbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"52b7b2bd4260d5cff10f46d32218c142\")>\ngetData = {'employeeID': 'PCS116', 'password': 'Admin@123'}\ngetsearchData = {'empname': 'Gowthami'}\n\n    def test_writeemployee(self,setupbrowser,getData,getsearchData):\n        driver = setupbrowser\n        self.driver = setupbrowser\n        self.navigate_to_url(\"https://infotimeqa.azurewebsites.net/\")\n        self.login(getData)\n    \n        employeedirectorypage = Searchemployeepage(self.driver)\n        employeedirectorypage.getemployee().click()\n        employeedirectorypage.getemployees_button().click()\n        time.sleep(20)\n    \n    \n        employeedirectorypage.getsearch_bar().send_keys(getsearchData[\"empname\"])\n        employeedirectorypage.getsearch_button().click()\n    \n>       ExcelWriter.write_employee_data(\"reademployee.xlsx\",\"employee_data\")\n\ntest_search_write_employee.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\TeatData\\writesData.py:27: in write_employee_data\n    book = openpyxl.load_workbook(\"C:\\\\Users\\\\Dell\\\\Downloads\\\\reademployee.xls\")\n..\\.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:346: in load_workbook\n    reader = ExcelReader(filename, read_only, keep_vba,\n..\\.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:123: in __init__\n    self.archive = _validate_archive(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfilename = 'C:\\\\Users\\\\Dell\\\\Downloads\\\\reademployee.xls'\n\n    def _validate_archive(filename):\n        \"\"\"\n        Does a first check whether filename is a string or a file-like\n        object. If it is a string representing a filename, a check is done\n        for supported formats by checking the given file-extension. If the\n        file-extension is not in SUPPORTED_FORMATS an InvalidFileException\n        will raised. Otherwise the filename (resp. file-like object) will\n        forwarded to zipfile.ZipFile returning a ZipFile-Instance.\n        \"\"\"\n        is_file_like = hasattr(filename, 'read')\n        if not is_file_like:\n            file_format = os.path.splitext(filename)[-1].lower()\n            if file_format not in SUPPORTED_FORMATS:\n                if file_format == '.xls':\n                    msg = ('openpyxl does not support the old .xls file format, '\n                           'please use xlrd to read this file, or convert it to '\n                           'the more recent .xlsx file format.')\n                elif file_format == '.xlsb':\n                    msg = ('openpyxl does not support binary format .xlsb, '\n                           'please convert this file to .xlsx format if you want '\n                           'to open it with openpyxl')\n                else:\n                    msg = ('openpyxl does not support %s file format, '\n                           'please check you can open '\n                           'it with Excel first. '\n                           'Supported formats are: %s') % (file_format,\n                                                           ','.join(SUPPORTED_FORMATS))\n>               raise InvalidFileException(msg)\nE               openpyxl.utils.exceptions.InvalidFileException: openpyxl does not support the old .xls file format, please use xlrd to read this file, or convert it to the more recent .xlsx file format.\n\n..\\.venv\\Lib\\site-packages\\openpyxl\\reader\\excel.py:93: InvalidFileException"}, "parameters": [{"name": "getData", "value": "{'employeeID': 'PCS116', 'password': 'Admin@123'}"}, {"name": "getsearchData", "value": "{'empname': 'Gowthami'}"}], "start": 1739781054584, "stop": 1739781139945, "uuid": "6250081a-f625-4b67-8c20-04de80b8f891", "historyId": "2f0b3e143bd7f137ae0e5fcb4ce7c183", "testCaseId": "b18632e7f6314b69e4d71881f2c3ac46", "fullName": "test_search_write_employee.TestHRMSwriteemployee#test_writeemployee", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setupbrowser')"}, {"name": "suite", "value": "test_search_write_employee"}, {"name": "subSuite", "value": "TestHRMSwriteemployee"}, {"name": "host", "value": "PACLAP-072"}, {"name": "thread", "value": "3024-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_search_write_employee"}]}