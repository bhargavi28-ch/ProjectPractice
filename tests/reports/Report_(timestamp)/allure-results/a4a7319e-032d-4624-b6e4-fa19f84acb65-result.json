{"name": "test_company_address[getcompaddData0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=132.0.6834.197)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6B7AE02F5+28725]\n\t(No symbol) [0x00007FF6B7A42AE0]\n\t(No symbol) [0x00007FF6B78D4F39]\n\t(No symbol) [0x00007FF6B7922D34]\n\t(No symbol) [0x00007FF6B7920EDF]\n\t(No symbol) [0x00007FF6B794FFAA]\n\t(No symbol) [0x00007FF6B791BF86]\n\t(No symbol) [0x00007FF6B79501C0]\n\t(No symbol) [0x00007FF6B7970181]\n\t(No symbol) [0x00007FF6B794FD53]\n\t(No symbol) [0x00007FF6B791A0E3]\n\t(No symbol) [0x00007FF6B791B471]\n\tGetHandleVerifier [0x00007FF6B7E0F30D+3366989]\n\tGetHandleVerifier [0x00007FF6B7E212F0+3440688]\n\tGetHandleVerifier [0x00007FF6B7E178FD+3401277]\n\tGetHandleVerifier [0x00007FF6B7BAAAAB+858091]\n\t(No symbol) [0x00007FF6B7A4E74F]\n\t(No symbol) [0x00007FF6B7A4A304]\n\t(No symbol) [0x00007FF6B7A4A49D]\n\t(No symbol) [0x00007FF6B7A38B69]\n\tBaseThreadInitThunk [0x00007FFFF2087374+20]\n\tRtlUserThreadStart [0x00007FFFF3D5CC91+33]", "trace": "self = <tests.test_companyprofile.TestOrganization object at 0x0000021A5E82E210>\ngetcompaddData = {'add_line1': 'Sandhyaetechno,8th floor,raidurg', 'add_line2': 'Gachibowli,Hyderabad', 'city': 'Hyderabad', 'country': 'India', ...}\n\n    def test_company_address(self,getcompaddData):\n    \n        companyaddpage = Companyaddresspage(self.driver)\n        companyaddpage.getcompany_postal_address().click()\n        #companyaddpage.getedit_button().click()\n>       companyaddpage.getadd_line1().send_keys(getcompaddData[\"add_line1\"])\n\ntests\\test_companyprofile.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:231: in send_keys\n    self._execute(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021A5EF35590>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF6B7A38B69]\\\\n\\\\tBaseThreadInitThunk [0x00007FFFF2087374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFFF3D5CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=132.0.6834.197)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6B7AE02F5+28725]\nE       \t(No symbol) [0x00007FF6B7A42AE0]\nE       \t(No symbol) [0x00007FF6B78D4F39]\nE       \t(No symbol) [0x00007FF6B7922D34]\nE       \t(No symbol) [0x00007FF6B7920EDF]\nE       \t(No symbol) [0x00007FF6B794FFAA]\nE       \t(No symbol) [0x00007FF6B791BF86]\nE       \t(No symbol) [0x00007FF6B79501C0]\nE       \t(No symbol) [0x00007FF6B7970181]\nE       \t(No symbol) [0x00007FF6B794FD53]\nE       \t(No symbol) [0x00007FF6B791A0E3]\nE       \t(No symbol) [0x00007FF6B791B471]\nE       \tGetHandleVerifier [0x00007FF6B7E0F30D+3366989]\nE       \tGetHandleVerifier [0x00007FF6B7E212F0+3440688]\nE       \tGetHandleVerifier [0x00007FF6B7E178FD+3401277]\nE       \tGetHandleVerifier [0x00007FF6B7BAAAAB+858091]\nE       \t(No symbol) [0x00007FF6B7A4E74F]\nE       \t(No symbol) [0x00007FF6B7A4A304]\nE       \t(No symbol) [0x00007FF6B7A4A49D]\nE       \t(No symbol) [0x00007FF6B7A38B69]\nE       \tBaseThreadInitThunk [0x00007FFFF2087374+20]\nE       \tRtlUserThreadStart [0x00007FFFF3D5CC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException"}, "parameters": [{"name": "getcompaddData", "value": "{'add_line1': 'Sandhyaetechno,8th floor,raidurg', 'add_line2': 'Gachibowli,Hyderabad', 'country': 'India', 'state': 'Telangana', 'city': 'Hyderabad', 'pincode': '546786'}"}], "start": 1739427061599, "stop": 1739427061775, "uuid": "5b48e5f3-49c5-4ae5-abc3-fe95e45380ab", "historyId": "a3d3dae8a4d50530269c8270e0675c4d", "testCaseId": "0c0e050136b9b12d5c6b6998b74979ee", "fullName": "tests.test_companyprofile.TestOrganization#test_company_address", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setupbrowser')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_companyprofile"}, {"name": "subSuite", "value": "TestOrganization"}, {"name": "host", "value": "PACLAP-072"}, {"name": "thread", "value": "12596-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_companyprofile"}]}