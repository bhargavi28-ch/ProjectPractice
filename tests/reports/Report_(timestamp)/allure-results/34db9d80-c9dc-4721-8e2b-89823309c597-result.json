{"name": "test_addemployee[getData0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/employee/?tab=1\">...</a> is not clickable at point (125, 278). Other element would receive the click: <a href=\"/uploads/?\">...</a>\n  (Session info: chrome=133.0.6943.143)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6F6DAC6A5+28789]\n\t(No symbol) [0x00007FF6F6D15B20]\n\t(No symbol) [0x00007FF6F6BA8F9A]\n\t(No symbol) [0x00007FF6F6C071E9]\n\t(No symbol) [0x00007FF6F6C04BA2]\n\t(No symbol) [0x00007FF6F6C01C51]\n\t(No symbol) [0x00007FF6F6C00B51]\n\t(No symbol) [0x00007FF6F6BF2314]\n\t(No symbol) [0x00007FF6F6C2732A]\n\t(No symbol) [0x00007FF6F6BF1BC6]\n\t(No symbol) [0x00007FF6F6C27540]\n\t(No symbol) [0x00007FF6F6C4F7E3]\n\t(No symbol) [0x00007FF6F6C27103]\n\t(No symbol) [0x00007FF6F6BEFFC0]\n\t(No symbol) [0x00007FF6F6BF1273]\n\tGetHandleVerifier [0x00007FF6F70F1AED+3458237]\n\tGetHandleVerifier [0x00007FF6F710829C+3550316]\n\tGetHandleVerifier [0x00007FF6F70FDB9D+3507565]\n\tGetHandleVerifier [0x00007FF6F6E72C6A+841274]\n\t(No symbol) [0x00007FF6F6D209EF]\n\t(No symbol) [0x00007FF6F6D1CB34]\n\t(No symbol) [0x00007FF6F6D1CCD6]\n\t(No symbol) [0x00007FF6F6D0C119]\n\tBaseThreadInitThunk [0x00007FFD44907374+20]\n\tRtlUserThreadStart [0x00007FFD4563CC91+33]", "trace": "self = <tests.test_createemployee.Testcreateemployee object at 0x000002F3D1FC1810>\nsetupbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7158470cff8618aa94a0ae5612853917\")>\ngetData = {'employeeID': 'PCS116', 'password': 'Admin@123'}\n\n    def test_addemployee(self,setupbrowser,getData):\n    \n        driver = setupbrowser\n        self.driver = setupbrowser\n        self.navigate_to_url(\"https://infotimeqa.azurewebsites.net/\")\n        self.login(getData)\n    \n        addemployeepage = Addemployeepage(driver)\n        addemployeepage.getemployee().click()\n>       addemployeepage.getaddemployee().click()\n\ntest_createemployee.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002F3D1FF1E80>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6F6D0C119]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD44907374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFD4563CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/employee/?tab=1\">...</a> is not clickable at point (125, 278). Other element would receive the click: <a href=\"/uploads/?\">...</a>\nE         (Session info: chrome=133.0.6943.143)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6F6DAC6A5+28789]\nE       \t(No symbol) [0x00007FF6F6D15B20]\nE       \t(No symbol) [0x00007FF6F6BA8F9A]\nE       \t(No symbol) [0x00007FF6F6C071E9]\nE       \t(No symbol) [0x00007FF6F6C04BA2]\nE       \t(No symbol) [0x00007FF6F6C01C51]\nE       \t(No symbol) [0x00007FF6F6C00B51]\nE       \t(No symbol) [0x00007FF6F6BF2314]\nE       \t(No symbol) [0x00007FF6F6C2732A]\nE       \t(No symbol) [0x00007FF6F6BF1BC6]\nE       \t(No symbol) [0x00007FF6F6C27540]\nE       \t(No symbol) [0x00007FF6F6C4F7E3]\nE       \t(No symbol) [0x00007FF6F6C27103]\nE       \t(No symbol) [0x00007FF6F6BEFFC0]\nE       \t(No symbol) [0x00007FF6F6BF1273]\nE       \tGetHandleVerifier [0x00007FF6F70F1AED+3458237]\nE       \tGetHandleVerifier [0x00007FF6F710829C+3550316]\nE       \tGetHandleVerifier [0x00007FF6F70FDB9D+3507565]\nE       \tGetHandleVerifier [0x00007FF6F6E72C6A+841274]\nE       \t(No symbol) [0x00007FF6F6D209EF]\nE       \t(No symbol) [0x00007FF6F6D1CB34]\nE       \t(No symbol) [0x00007FF6F6D1CCD6]\nE       \t(No symbol) [0x00007FF6F6D0C119]\nE       \tBaseThreadInitThunk [0x00007FFD44907374+20]\nE       \tRtlUserThreadStart [0x00007FFD4563CC91+33]\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "parameters": [{"name": "getData", "value": "{'employeeID': 'PCS116', 'password': 'Admin@123'}"}], "start": 1741588030433, "stop": 1741588046484, "uuid": "a682198d-1138-4044-8812-6439b7d8b3e7", "historyId": "0828934387f60644e15d420570dc0343", "testCaseId": "9e17e91c72ad7119fbbd1224fb0dd433", "fullName": "test_createemployee.Testcreateemployee#test_addemployee", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setupbrowser')"}, {"name": "suite", "value": "test_createemployee"}, {"name": "subSuite", "value": "Testcreateemployee"}, {"name": "host", "value": "PACLAP-072"}, {"name": "thread", "value": "3596-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_createemployee"}]}