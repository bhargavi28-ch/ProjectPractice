{"name": "test_documentsdetails[getdocumentsdata0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"nav-link\" id=\"tab8-tab\" data-toggle=\"tab\" href=\"#tab8\" role=\"tab\" aria-controls=\"tab8\" aria-selected=\"false\">...</a> is not clickable at point (368, 32). Other element would receive the click: <div class=\"header-item header-search form-style-2 overflow-hidden\">...</div>\n  (Session info: chrome=132.0.6834.196)\nStacktrace:\n\tGetHandleVerifier [0x00007FF791EF02F5+28725]\n\t(No symbol) [0x00007FF791E52AE0]\n\t(No symbol) [0x00007FF791CE510A]\n\t(No symbol) [0x00007FF791D410F8]\n\t(No symbol) [0x00007FF791D3EB42]\n\t(No symbol) [0x00007FF791D3BC51]\n\t(No symbol) [0x00007FF791D3ABB1]\n\t(No symbol) [0x00007FF791D2C6B4]\n\t(No symbol) [0x00007FF791D5FFAA]\n\t(No symbol) [0x00007FF791D2BF86]\n\t(No symbol) [0x00007FF791D601C0]\n\t(No symbol) [0x00007FF791D80181]\n\t(No symbol) [0x00007FF791D5FD53]\n\t(No symbol) [0x00007FF791D2A0E3]\n\t(No symbol) [0x00007FF791D2B471]\n\tGetHandleVerifier [0x00007FF79221F30D+3366989]\n\tGetHandleVerifier [0x00007FF7922312F0+3440688]\n\tGetHandleVerifier [0x00007FF7922278FD+3401277]\n\tGetHandleVerifier [0x00007FF791FBAAAB+858091]\n\t(No symbol) [0x00007FF791E5E74F]\n\t(No symbol) [0x00007FF791E5A304]\n\t(No symbol) [0x00007FF791E5A49D]\n\t(No symbol) [0x00007FF791E48B69]\n\tBaseThreadInitThunk [0x00007FFF65227374+20]\n\tRtlUserThreadStart [0x00007FFF671DCC91+33]", "trace": "self = <tests.test_companyinfo.Testcompanyinformation object at 0x0000028CD9809150>\ngetdocumentsdata = {'document_ID': '501423452345', 'document_type': 'Aadhar card'}\n\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_documentsdetails(self,getdocumentsdata):\n    \n        documentspage = Documentspage(self.driver)\n    \n    \n    \n>       documentspage.getdocuments_button().click()\n\ntests\\test_companyinfo.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000028CD9766CF0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF791E48B69]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF65227374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFF671DCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"nav-link\" id=\"tab8-tab\" data-toggle=\"tab\" href=\"#tab8\" role=\"tab\" aria-controls=\"tab8\" aria-selected=\"false\">...</a> is not clickable at point (368, 32). Other element would receive the click: <div class=\"header-item header-search form-style-2 overflow-hidden\">...</div>\nE         (Session info: chrome=132.0.6834.196)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF791EF02F5+28725]\nE       \t(No symbol) [0x00007FF791E52AE0]\nE       \t(No symbol) [0x00007FF791CE510A]\nE       \t(No symbol) [0x00007FF791D410F8]\nE       \t(No symbol) [0x00007FF791D3EB42]\nE       \t(No symbol) [0x00007FF791D3BC51]\nE       \t(No symbol) [0x00007FF791D3ABB1]\nE       \t(No symbol) [0x00007FF791D2C6B4]\nE       \t(No symbol) [0x00007FF791D5FFAA]\nE       \t(No symbol) [0x00007FF791D2BF86]\nE       \t(No symbol) [0x00007FF791D601C0]\nE       \t(No symbol) [0x00007FF791D80181]\nE       \t(No symbol) [0x00007FF791D5FD53]\nE       \t(No symbol) [0x00007FF791D2A0E3]\nE       \t(No symbol) [0x00007FF791D2B471]\nE       \tGetHandleVerifier [0x00007FF79221F30D+3366989]\nE       \tGetHandleVerifier [0x00007FF7922312F0+3440688]\nE       \tGetHandleVerifier [0x00007FF7922278FD+3401277]\nE       \tGetHandleVerifier [0x00007FF791FBAAAB+858091]\nE       \t(No symbol) [0x00007FF791E5E74F]\nE       \t(No symbol) [0x00007FF791E5A304]\nE       \t(No symbol) [0x00007FF791E5A49D]\nE       \t(No symbol) [0x00007FF791E48B69]\nE       \tBaseThreadInitThunk [0x00007FFF65227374+20]\nE       \tRtlUserThreadStart [0x00007FFF671DCC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "parameters": [{"name": "getdocumentsdata", "value": "{'document_type': 'Aadhar card', 'document_ID': '501423452345'}"}], "start": 1739375127103, "stop": 1739375128578, "uuid": "553d8937-d53c-4dc6-bb4c-53e2a0d5cbeb", "historyId": "c52755f989bcbafff0984f0afb826b0a", "testCaseId": "d7d7784b4242e50288e97d81dba5db2e", "fullName": "tests.test_companyinfo.Testcompanyinformation#test_documentsdetails", "labels": [{"name": "severity", "value": "normal"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setupbrowser')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_companyinfo"}, {"name": "subSuite", "value": "Testcompanyinformation"}, {"name": "host", "value": "PACLAP-072"}, {"name": "thread", "value": "5800-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_companyinfo"}]}